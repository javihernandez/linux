/**
 * GPII USB utilities
 *
 * Copyright 2014 Emergya
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * You may obtain a copy of the License at
 * https://github.com/gpii/universal/LICENSE.txt
 */

(function () {
    "use strict";

    var fluid = require("universal");
    var gpii = fluid.registerNamespace("gpii");

    fluid.registerNamespace("gpii.usbUtils");

    var dbus = require('dbus-native');
    var udev = require('udev');
    var fs = require("fs");
    var path = require("path");
    var async = require("async");

    var bus = dbus.systemBus();
    var udservice = bus.getService('org.freedesktop.UDisks2');
 
    var latestDevice = { device: '', state: 'removed'};
    gpii.usbUtils.deviceList = [];

    var bytesToSize = function (bytes) {
        var sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
        if (bytes == 0) return 'n/a';
        var i = parseInt(Math.floor(Math.log(bytes) / Math.log(1024)));
        return Math.round(bytes / Math.pow(1024, i), 2) + ' ' + sizes[i];
    };

    // We should be using UDisks2 to get this information, but due to a bug
    // https://github.com/sidorares/node-dbus/issues/31
    // we have to workaround with udev+udisks to address this task.
    //
    var getUSBs = function() {
        gpii.usbUtils.deviceList = [];
        udev.list().forEach(function (device) {
            if (device.DEVTYPE == 'partition' && device.ID_BUS == 'usb') {
 
                var usbDevice = {
                    name: null,
                    label: null,
                    size: null,
                    mountPoint: null,
                    hasToken: null
                };
 
                usbDevice.name = device.DEVNAME;

                var b = device.DEVNAME.split("/");
                var deviceObjectPath = "/org/freedesktop/UDisks2/block_devices/"
                                   + b[b.length - 1];

                async.parallel(
                    [
                        function(callback) {
                            getMountPoints(deviceObjectPath, function (mountPaths) {
                                usbDevice.mountPoint = mountPaths.toString().split("\u0000")[0];
                                callback();
                            });
                        },
                        function(callback) {
                            getBlockProperties(deviceObjectPath, function (label, size) {
                                usbDevice.label = label;
                                usbDevice.size = size;
                                getHasToken(usbDevice, function (hasToken) {
                                    usbDevice.hasToken = hasToken;
                                    callback(usbDevice);
                                });
                            });
                        }
                    ],
                    function (result) {
                      //console.log(JSON.stringify(result, null, 4));
                      gpii.usbUtils.deviceList.push(result);
                    }
                );
            }
        });
    };
 
    var getHasToken = function (device, callback) {
        fs.exists(path.join(device.mountPoint, '.gpii-user-token.txt'), function (result) {
          callback(result);
        })
    };
 
    var getBlockProperties = function (device, callback) {
        udservice.getInterface(device, 'org.freedesktop.DBus.Properties', function(err,diskProperties) {
            diskProperties.Get('org.freedesktop.UDisks2.Block', 'IdLabel', function(err, label) {
                diskProperties.Get('org.freedesktop.UDisks2.Block', 'Size', function(err, size) {
                    callback(label[1][0], bytesToSize(size[1][0]));
                });
            });
        });
    };
 
    var getMountPoints = function (device, callback) {
        udservice.getInterface(device, 'org.freedesktop.DBus.Properties', function(err,diskProperties) {
            diskProperties.Get('org.freedesktop.UDisks2.Filesystem', 'MountPoints', function(err, mountPointPaths) {
                var b = mountPointPaths[1][0][0];
                var result = new Buffer(b);
                callback(result);
            });
        });
    };
 
    gpii.usbUtils.readToken = function (device) {
        fs.readFile(path.join(device.mountPoint, '.gpii-user-token.txt'), 'utf8', function (err, data) {
            if (err) {
                return console.log(err);
            }
            console.log("token: " + data);
        });
    };
 
    gpii.usbUtils.writeToken = function (device, token) {
        var filePath = path.join(device.mountPoint, '.gpii-user-token.txt');
        fs.writeFile(filePath, token, function (err) {
            console.log("token added");
        });
    };
 
    gpii.usbUtils.deleteToken = function (device) {
        fs.unlink(path.join(device.mountPoint, '.gpii-user-token.txt'), function (err) {
            console.log("token removed");
        });
    };
 
    udservice.getInterface(
        '/org/freedesktop/UDisks2',
        'org.freedesktop.DBus.ObjectManager',
        function (err, ud) {
 
            getUSBs();

            ud.on('InterfacesAdded', function(deviceObjectPath) {
                //console.log('DeviceAdded', deviceObjectPath);
                if (deviceObjectPath.indexOf("/org/freedesktop/UDisks2/jobs/") === -1) {
                    latestDevice = { device: deviceObjectPath, state: "added"};
                }
            });

            ud.on('InterfacesRemoved', function(deviceObjectPath) {
                //console.log('DeviceRemoved', deviceObjectPath);
                if (deviceObjectPath.indexOf("/org/freedesktop/UDisks2/jobs/") > -1) {
                    //if (latestDevice.state === "added") {
                    //  getUSBs();
                    //}
                    getUSBs();
                } else {
                    latestDevice = { device: deviceObjectPath, state: "removed"};
                }
            });
        }
    );
})();
