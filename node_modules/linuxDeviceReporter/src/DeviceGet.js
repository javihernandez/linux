/**
 * GPII Device GET Handler
 *
 * Copyright 2012 OCAD University
 * Copyright 2014 Emergya
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * You may obtain a copy of the License at
 * https://github.com/gpii/universal/LICENSE.txt
 */

(function () {

    "use strict";

    var fluid = require("infusion"),
        os = require("os"),
        http = require('http'),
        universal = require("universal"),
        gpii = fluid.registerNamespace("gpii"),
        kettle = fluid.require("kettle", require);

    var solutionsRegistry = "";

    // We're going to hardcode registeredPlugins for now.
    // In a future, device reporter plugins should be registered at start time 
    // either by themselves or by the platform-specific side.
    // 
    require("packagekit");
    var packageKit = universal.registerNamespace("gpii.packageKit");
    
    fluid.defaults("kettle.requests.request.handler.deviceGet", {
        gradeNames: ["fluid.littleComponent", "autoInit"],
        invokers: {
            handle: {
                funcName: "gpii.handleDeviceGet",
                args: ["{requestProxy}", "{deviceReporter}.solutionsRegistryDataSource"]
            }
        }
    });

    gpii.handleDeviceGet = function (requestProxy, solutionsRegistryDataSource) {

          solutionsRegistryDataSource.get(null, function onSuccess(solutions) {
              //var solutions = JSON.parse(solutionsRegistry);
              var installedSolutions = [];
              var found = false;

              var registeredPlugins =  [
                {
                  "id": "gpii.packageKit",
                  "data": packageKit.get().data
                }
              ];

              registeredPlugins.forEach( function (plugin) {
                solutions.forEach ( function (solution) {
                  if (plugin.id in solution.contexts) {
                    var solutionSpec = solution.contexts[plugin.id]
                    plugin.data.some (function (app) {
                      solutionSpec.some (function (spec) {
                        if (app.name == spec.name) {
                          installedSolutions.push ( {"id": solution.id } );
                          found = true;
                        }
                        return found;
                      });
                      return found;
                    });
                  }
                  found = false;
                })
              });

              requestProxy.events.onSuccess.fire({
                  solutions: installedSolutions,
                  OS: {
                      //TODO: need to report more details - windowmanager, etc.
                      id: os.platform(),
                      // TODO: Need a better strategy - Node semver fails horribly
                      // in the face of the benign underscore (eg. x86_64).
                      version: os.release().replace("_", "-")
                  }
              });
          });
    };

})();
