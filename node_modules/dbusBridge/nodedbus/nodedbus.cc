/*
 * GPII Node.js DBus Bridge
 *
 * Copyright 2012 Emergya
 * Author: Javier Hern√°ndez <jhernandez@emergya.com>
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * You may obtain a copy of the License at
 * https://github.com/gpii/universal/LICENSE.txt
 * */

#include <gio/gio.h>
#include <stdlib.h>

#include <node.h>
#include <v8.h>

using namespace v8;

/* Should take as arguments
  - bus_name: org.provider.Component (str)
  - object_path: /org/provider/Component (str)
  - interface_name: org.provider.Interface (str)
  - method_name: method_name (str)
  - parameters: 
*/
Handle<Value> dbus_call_sync(const Arguments& args) {
  HandleScope scope;
  GDBusConnection *session_bus;
  GError *error;
  GVariant *value;
  gboolean return_value;
  GVariant *arguments;

  /* Arguments */
  char bus_name[1024];
  char object_path[1024];
  char interface_name[1024];
  char method_name[1024];

  args[0]->ToString()->WriteAscii(bus_name);
  args[1]->ToString()->WriteAscii(object_path);
  args[2]->ToString()->WriteAscii(interface_name);
  args[3]->ToString()->WriteAscii(method_name);

  if (args[4]->IsBoolean()) {
    arguments = g_variant_new("(b)",args[4]->BooleanValue());
  }
  else if (args[4]->IsNumber()) {
    arguments = g_variant_new("(i)",args[4]->NumberValue());
  }
  else if (args[4]->IsString()) {
    char str_value[1024];
    args[4]->ToString()->WriteAscii(str_value);
    arguments = g_variant_new("(s)",str_value);
  }
  else if (args[4]->IsNull()){
    arguments = NULL;
  }
  else {
    ThrowException(Exception::Error(String::New("We haven't implemented this type yet!")));
  }

  error=NULL;

  session_bus = g_bus_get_sync(G_BUS_TYPE_SESSION, NULL, &error);
  
  value = g_dbus_connection_call_sync (session_bus, 
                                       bus_name,
                                       object_path,
                                       interface_name,
                                       method_name,
                                       arguments, //g_variant_new ("(b)", TRUE),
                                       NULL, //G_VARIANT_TYPE ("(b)"),
                                       G_DBUS_CALL_FLAGS_NONE,
                                       -1,
                                       NULL,
                                       &error);

  if (value == NULL) {
    g_printerr ("Error invoking %s: %s\n", method_name, error->message);
    g_error_free (error);
    exit(1);
  }

//  g_variant_get (value, "(b)", &return_value);
//  TODO: Deal with return_value
//

  g_variant_unref (value);
  g_object_unref (session_bus);
  return scope.Close(Boolean::New(TRUE));
}


void init(Handle<Object> target) {
  g_type_init(); // Initialize gobject system
  target->Set(String::NewSymbol("dbus_call_sync"),
              FunctionTemplate::New(dbus_call_sync)->GetFunction());
}
NODE_MODULE(nodedbus, init)
