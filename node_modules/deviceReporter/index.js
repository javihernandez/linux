/*
GPII Linux Device Reporter

Copyright 2014 Emergya

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

You may obtain a copy of the License at
https://github.com/gpii/universal/LICENSE.txt
*/

/* Device Reporter
 *
 * Most of this logic should be moved to be cross-platform and just keep here
 * the platform-specific code.
 *
**/

var fluid = require("universal");

var http = require('http');
var os = require('os');

var registeredPlugins = [];
var solutionsRegistry = "";
var installedSolutions = [];

// We're going to hardcode registeredPlugins for now.
// In a future, device reporter plugins should be registered at start time 
// either by themselves or by the platform-specific side.
//
require("packagekit");
packageKit = fluid.registerNamespace("gpii.packageKit");

// This is how registeredPlugins' structure could look like
//
registeredPlugins =  [
  { 
    "id": "gpii.packageKit",
    "data": packageKit.get().data
  }
];

http.get("http://localhost:8081/solution/" + os.platform(), function (res) {

  res.on('data', function (data) {
    solutionsRegistry += data;
  });

  res.on('end', function() {
    var solutions = JSON.parse(solutionsRegistry);
    var found = false;

    registeredPlugins.forEach( function (plugin) {
      solutions.forEach ( function (solution) {
        if (plugin.id in solution.contexts) {
          solutionSpec = solution.contexts[plugin.id];
          plugin.data.some (function (app) {
            solutionSpec.some (function (spec) {
              if (app.name == spec.name) {
                installedSolutions.push ( {"id": solution.id } );
                found = true;
              }
              return found;
            });
            return found;
          });
        }
        found = false;
      })
    });

    console.log(installedSolutions);

  });
});
